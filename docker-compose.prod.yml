version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-ai_chatbot}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Not exposing db to the host in production
    # ports:
    #   - "5432:5432"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.prod
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - NODE_ENV=production
    ports:
      - "8000:8000"
    restart: unless-stopped

  # Using development mode for the frontend to avoid CSS processing issues
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=${API_URL:-http://localhost:8000/api/v1}
      - NODE_ENV=development
    restart: unless-stopped
    volumes:
      - ./frontend/node_modules:/app/node_modules

  # Optional: Add nginx as reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data: 