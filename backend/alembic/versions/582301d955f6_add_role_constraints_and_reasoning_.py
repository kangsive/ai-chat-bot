"""add_role_constraints_and_reasoning_content

Revision ID: 582301d955f6
Revises: 18ce3c55bbbb
Create Date: 2025-04-04 22:05:52.374355

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '582301d955f6'
down_revision: Union[str, None] = '18ce3c55bbbb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('message', sa.Column('reasoning_content', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('role', sa.String(length=20), server_default='client', nullable=False))
    
    # No need to update existing data since we're keeping 'system' role
    # op.execute("UPDATE message SET role = 'assistant' WHERE role = 'system'")
    
    # Add check constraints
    op.create_check_constraint(
        'check_user_role',
        'users',
        sa.Column('role').in_(["engineer", "client"])
    )
    
    op.create_check_constraint(
        'check_message_role',
        'message',
        sa.Column('role').in_(["system", "user", "assistant", "tool"])
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop check constraints
    op.drop_constraint('check_message_role', 'message', type_='check')
    op.drop_constraint('check_user_role', 'users', type_='check')
    
    # Revert data changes if needed (optional)
    # op.execute("UPDATE message SET role = 'system' WHERE role = 'assistant' AND id IN (SELECT id FROM message WHERE your_condition)")
    
    op.drop_column('users', 'role')
    op.drop_column('message', 'reasoning_content')
    # ### end Alembic commands ###
